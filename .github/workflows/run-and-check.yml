name: Run API (Smoke)

on:
  push:
    paths:
      - 'src/**'
      - 'server.js'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/run-and-check.yml'
  workflow_dispatch: {}

jobs:
  run-and-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install deps
        run: npm install --no-audit --no-fund

      # Arranca src/server.js en background y guarda logs
      - name: Start server (src/server.js)
        env:
          PORT: 3000
          CI_SMOKE: "1"   # evita efectos (DB, colas) si tu app lo respeta
        run: |
          node src/server.js > server.log 2>&1 & echo $! > .pidfile
          sleep 1
          echo "== first lines of server.log =="
          head -n 60 server.log || true

      # Espera a que el puerto 3000 se abra (máx ~30s)
      - name: Wait for port 3000
        run: |
          for i in {1..60}; do
            if (echo > /dev/tcp/127.0.0.1/3000) >/dev/null 2>&1; then
              echo "✅ Port 3000 is open"
              exit 0
            fi
            sleep 0.5
          done
          echo "❌ Server did not open port 3000 in time"
          echo "== last server.log =="
          tail -n 200 server.log || true
          exit 1

      # Verifica ruta real del router
      - name: Curl /api/ping
        if: success()
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:3000/api/ping || true)
          echo "HTTP $code"
          [ "$code" = "200" ]

      # Apaga el proceso y muestra logs finales siempre
      - name: Stop server (always)
        if: always()
        run: |
          if [ -f .pidfile ]; then
            kill $(cat .pidfile) || true
          fi
          echo "== final server.log =="
          [ -f server.log ] && tail -n 200 server.log || true
